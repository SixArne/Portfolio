import{_ as t,o as a,c as r,a as n}from"./app.75468230.js";const e="/Portfolio/VulkanRasterizer/vulkan_end.png",i="/Portfolio/VulkanRasterizer/basicTriangleMeshes.png",s="/Portfolio/VulkanRasterizer/vulkan_textured.png",k=JSON.parse('{"title":"Vulkan rasterizer","description":"","frontmatter":{},"headers":[{"level":2,"title":"The first 1000 lines","slug":"the-first-1000-lines","link":"#the-first-1000-lines","children":[]},{"level":2,"title":"Textures","slug":"textures","link":"#textures","children":[]},{"level":2,"title":"Github","slug":"github","link":"#github","children":[]}],"relativePath":"Projects/Vulkan-rasterizer.md"}'),o={name:"Projects/Vulkan-rasterizer.md"},l=n('<p><img src="'+e+'" alt="Vulkan mesh"></p><h1 id="vulkan-rasterizer" tabindex="-1">Vulkan rasterizer <a class="header-anchor" href="#vulkan-rasterizer" aria-hidden="true">#</a></h1><p>Starting from the 2nd year I started to have in interest in graphics programming, this lead me to search for API&#39;s to learn. Because we already learned DirectX11 in DAE I&#39;ve decided to go and learn the Vulkan API by Khronos.</p><p>For those that don&#39;t know: Vulkan is also known as the next generation of OpenGL, where the Khronos group decided to give the developers full control of the API. This makes Vulkan very configurable but also hard to learn, hence I&#39;ve decided to start my journey and this is the result.</p><h2 id="the-first-1000-lines" tabindex="-1">The first 1000 lines <a class="header-anchor" href="#the-first-1000-lines" aria-hidden="true">#</a></h2><p>As this is the first Graphical API I learned I made sure to buy a course on Udemy going over creating the entire pipeline from scratch which to be honest: It is really... really tested my patience.</p><p>The hard thing about Vulkan is that it takes a long time before anything is rendered, the nice thing about it is that you understand almost everything that goes into the pipeline.</p><p>After writing over 1000 lines I finally had a triangle, but I couldn&#39;t stop there! I decided to make a camera that can fly around in the world and added quads to it, and after implementing the depth buffer my first Vulkan application was starting to look good!</p><p><img src="'+i+'" alt="Vulkan triangle meshes"></p><h2 id="textures" tabindex="-1">Textures <a class="header-anchor" href="#textures" aria-hidden="true">#</a></h2><p>Ofcourse a game these days needs to be able to render textures, so the next thing to do was to add textures and that means.... MORE ATTACHMENTS</p><p>After writing some more code we can now render textures on our meshes</p><p><img src="'+s+'" alt="Vulkan textured mesh"></p><p>Finally it was time to load in a mesh and test the final result for my first Vulkan application</p><p><img src="'+e+'" alt="Vulkan mesh"></p><h2 id="github" tabindex="-1"><a href="https://github.com/SixArne/VulkanRenderer" target="_blank" rel="noreferrer">Github</a> <a class="header-anchor" href="#github" aria-hidden="true">#</a></h2>',16),h=[l];function d(u,c,p,g,m,f){return a(),r("div",null,h)}const b=t(o,[["render",d]]);export{k as __pageData,b as default};
