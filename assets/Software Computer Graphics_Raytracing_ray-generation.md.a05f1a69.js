import{_ as s,o as n,c as a,b as l}from"./app.5d47098b.js";const F=JSON.parse('{"title":"Let there be rays","description":"","frontmatter":{},"headers":[],"relativePath":"Software Computer Graphics/Raytracing/ray-generation.md"}'),p={name:"Software Computer Graphics/Raytracing/ray-generation.md"},o=l(`<h1 id="let-there-be-rays" tabindex="-1">Let there be rays <a class="header-anchor" href="#let-there-be-rays" aria-hidden="true">#</a></h1><p>Our first step to make a ray-tracing application is to loop over all pixels in our window, for the sake of simplicity I will be cutting some corners, but these corners will still be explained in theory, so don&#39;t worry.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// We will treat the current pixel (2D) as a 1 dimensional index.</span></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> pixelIndex{}</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> numberOfPixels</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">pixelIndex</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">PerPixel</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pixelIndex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You probably noticed that I have a function PerPixel, this is so we can later multi-thread this really easily. Lets take a look at the implementation of PerPixel.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PerPixel</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">pixelIndex</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">    // Convert from 1D pixel coordinate to 2D</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> pixelX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pixelIndex </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> m_ScreenWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> pixelY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pixelIndex </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> m_ScreenWidth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // We want our ray to hit the middle of a pixel, so we offset</span></span>
<span class="line"><span style="color:#676E95;">    // both x and y by .5</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> rasterX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pixelX </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> rasterY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pixelY </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Convert from raster coordinate to camera coordinate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> cameraX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rasterX</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)(</span><span style="color:#A6ACCD;">m_ScreenWidth </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">m_ScreenWidth</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">m_ScreenHeight </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m_Camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fov</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> cameraY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> rasterY</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">m_ScreenHeight </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m_Camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fov</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Vector to transform</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Vector3 vectorToTransform</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">cameraX</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cameraY</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Create our ray object</span></span>
<span class="line"><span style="color:#A6ACCD;">    Ray pixelRay</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">    pixelRay</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m_Camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    pixelRay</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">direction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m_Camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cameraToWorld</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TransformVector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vectorToTransform</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Normalized</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><br><br> Well first we have to consider the following situation: We are shooting a ray from a camera through a pixel, but last time I checked there is no coordinate system that works like that. So we have to transform out pixel data into a coordinate that the camera can work with.</p>`,6),e=[o];function r(t,c,D,y,C,i){return n(),a("div",null,e)}const m=s(p,[["render",r]]);export{F as __pageData,m as default};
