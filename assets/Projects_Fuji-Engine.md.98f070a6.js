import{_ as o,o as n,c as a,d as e,e as t}from"./app.75468230.js";const b=JSON.parse('{"title":"Fuji Engine","description":"","frontmatter":{},"headers":[{"level":2,"title":"About this project","slug":"about-this-project","link":"#about-this-project","children":[]}],"relativePath":"Projects/Fuji-Engine.md"}'),r={name:"Projects/Fuji-Engine.md"},i=e("h1",{id:"fuji-engine",tabindex:"-1"},[t("Fuji Engine "),e("a",{class:"header-anchor",href:"#fuji-engine","aria-hidden":"true"},"#")],-1),s=e("h2",{id:"about-this-project",tabindex:"-1"},[t("About this project "),e("a",{class:"header-anchor",href:"#about-this-project","aria-hidden":"true"},"#")],-1),c=e("p",null,"After writing the Multi-Renderer as a school project it became clear to me that I don't fully understand how to structure a big project and to abstract the code. A mesh shouldn't have to know what renderer is being used to render it to the screen.",-1),d=e("p",null,[t("So I decided to make a game engine to learn how to structure these kind of projects better, as a reference I will be looking at the "),e("code",null,"Kohi Game Engine"),t(" and "),e("code",null,"Hazel Game Engine"),t(".")],-1),h=[i,s,c,d];function l(u,p,_,j,g,f){return n(),a("div",null,h)}const E=o(r,[["render",l]]);export{b as __pageData,E as default};
