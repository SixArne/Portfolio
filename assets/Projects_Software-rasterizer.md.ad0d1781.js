import{_ as s,o as n,c as a,d as e,a as l}from"./app.e53850ea.js";const p="/Portfolio/rasterizer_week_2.png",r="/Portfolio/rasterizer_week_3.png",o="/Portfolio/rasterizer_end.png",A=JSON.parse('{"title":"Software rasterizer","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"End assignment","slug":"end-assignment","link":"#end-assignment","children":[]},{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[]},{"level":2,"title":"Github","slug":"github","link":"#github","children":[]}],"relativePath":"Projects/Software-rasterizer.md"}'),t={name:"Projects/Software-rasterizer.md"},c=e("iframe",{width:"720",height:"480",src:"https://www.youtube.com/embed/q-QW6NCtMHA",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),i=l('<p><br><br></p><h1 id="software-rasterizer" tabindex="-1">Software rasterizer <a class="header-anchor" href="#software-rasterizer" aria-hidden="true">#</a></h1><p>In modern times we take the rasterizer in our graphic cards for granted, but what actually happens in these black boxes? That&#39;s what we learned in Graphics Programming I.</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>In the 7th week of Graphics programming we got the assignment to program a software based rasterizer with support for displaying models with textures, normal maps and shadow maps. Every week we had to expand the project with the new features.</p><p>Just like our raytracing assignment we have to optimize the code as much as possible, luckily because of my little parallel_for I managed to reach high FPS early in the project. This was the result after week 2.</p><p><img src="'+p+'" alt="week_2_result"></p><p>In the third week we had to implement some basic triangle clipping, everything that is outside the view frustum was not to be displayed. On top of that we had to read in the vertex data from obj files and also display textures. The end result of this week is a nice little Tuk Tuk.</p><p><img src="'+r+`" alt="week_3_result"></p><h2 id="end-assignment" tabindex="-1">End assignment <a class="header-anchor" href="#end-assignment" aria-hidden="true">#</a></h2><p>Doing this on the CPU is great to learn, but not really practical as things run a <code>LOT</code> slower than on the GPU. The end assignment of this subject was simple: <code>&#39;Make an application that can switch the renderer between DirectX11 and the CPU&#39;</code>.</p><p>So after spending some time on polymorphing the code it can now switch between the 2 renderers! By making a base render class and overriding the base methods you can easily switch the renderers without much issue. However how the mesh is rendered is very different between DirectX and the CPU, So I decided to abstract the mesh location and transforms away and just pass their pointers to the specific meshes instead.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">BaseRenderer</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">BaseRenderer</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SDL_Window</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pWindow</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Camera</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pCamera</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Update</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Timer</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pTimer</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Render</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">protected</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;">    // Shared data</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DirectX_Renderer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">BaseRenderer</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;">    // external mesh data </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">DirectX_Renderer</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SDL_Window</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pWindow</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Camera</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pCamera</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MeshData</span><span style="color:#89DDFF;">*&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pMeshes</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Update</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Timer</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pTimer</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Render</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;">	// Specific DirectX members</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">DirectXMeshes</span><span style="color:#89DDFF;">*&gt;</span><span style="color:#F07178;"> m_pMeshes</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DirectXMesh</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">DirectXMesh</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ID3D11Device</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pDevice</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MeshData</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">meshData</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;">    // Shared data like transforms</span></span>
<span class="line"><span style="color:#F07178;">	MeshData</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> m_pMeshData</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">    // Dx11 properties</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>After writing a bridge to switch between the 2 Renderers we have the following result</p><p><img src="`+o+'" alt="Rasterizer end"></p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-hidden="true">#</a></h2><h2 id="github" tabindex="-1"><a href="https://github.com/SixArne/Rasterizer-Arne-Six-2GD-08E" target="_blank" rel="noreferrer">Github</a> <a class="header-anchor" href="#github" aria-hidden="true">#</a></h2>',17),y=[c,i];function F(d,h,b,u,m,D){return n(),a("div",null,y)}const w=s(t,[["render",F]]);export{A as __pageData,w as default};
