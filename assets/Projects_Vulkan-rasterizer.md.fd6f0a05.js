import{_ as e,o as a,c as s,b as n}from"./app.cebab895.js";const m=JSON.parse('{"title":"Vulkan rasterizer","description":"","frontmatter":{},"headers":[],"relativePath":"Projects/Vulkan-rasterizer.md"}'),r={name:"Projects/Vulkan-rasterizer.md"},t=n(`<h1 id="vulkan-rasterizer" tabindex="-1">Vulkan rasterizer <a class="header-anchor" href="#vulkan-rasterizer" aria-hidden="true">#</a></h1><p>Starting from the 2nd year I started to have in interest in graphics programming, this lead me to search for API&#39;s to learn. Because we already learned DirectX11 in DAE I&#39;ve decided to go and learn the Vulkan API by Khronos.</p><p>For those that don&#39;t know: Vulkan is also known as the next generation of OpenGL, where the Khronos group decided to give the developers full control of the API. This makes Vulkan very configurable but also hard to learn, hence I&#39;ve decided to start my journey and this is the result.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">VkSurfaceCreateInfo createInfo</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">createInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_SURFACE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,4),o=[t];function l(c,p,i,d,h,_){return a(),s("div",null,o)}const f=e(r,[["render",l]]);export{m as __pageData,f as default};
