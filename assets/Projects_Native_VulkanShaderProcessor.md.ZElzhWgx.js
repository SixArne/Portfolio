import{_ as e,o as a,c as r,R as o}from"./chunks/framework.z--if-CC.js";const _=JSON.parse('{"title":"Vulkan Shader Processor","description":"","frontmatter":{},"headers":[],"relativePath":"Projects/Native/VulkanShaderProcessor.md","filePath":"Projects/Native/VulkanShaderProcessor.md"}'),t={name:"Projects/Native/VulkanShaderProcessor.md"},s=o('<h1 id="vulkan-shader-processor" tabindex="-1">Vulkan Shader Processor <a class="header-anchor" href="#vulkan-shader-processor" aria-label="Permalink to &quot;Vulkan Shader Processor&quot;">​</a></h1><p>This is a small tool I developed while working on my own rendering engine. When using Vulkan, GLSL files need to be compiled into SPIR-V. In most tutorials, this is done by manually adding source files to a script and running it periodically.</p><p>To simplify this process, I created a processing library that automatically detects the shader type based on its naming convention and compiles the GLSL code into SPIR-V. This eliminates the need for manual compilation, saving time and streamlining the workflow.</p><p>The project was built with CMake and C++20 in mind. All dependencies are fetched from external repositories, keeping the source code lightweight when pulled from GitHub.</p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/SixArne/vsp" target="_blank" rel="noreferrer">github</a></p>',6),n=[s];function i(l,c,d,h,p,u){return a(),r("div",null,n)}const f=e(t,[["render",i]]);export{_ as __pageData,f as default};
