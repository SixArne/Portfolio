import{_ as s,o as n,c as a,b as l}from"./app.5d47098b.js";const A=JSON.parse('{"title":"Vulkan rasterizer","description":"","frontmatter":{},"headers":[{"level":2,"title":"The first 1000 lines","slug":"the-first-1000-lines","link":"#the-first-1000-lines","children":[]}],"relativePath":"Projects/Vulkan-rasterizer.md"}'),p={name:"Projects/Vulkan-rasterizer.md"},e=l(`<h1 id="vulkan-rasterizer" tabindex="-1">Vulkan rasterizer <a class="header-anchor" href="#vulkan-rasterizer" aria-hidden="true">#</a></h1><p>Starting from the 2nd year I started to have in interest in graphics programming, this lead me to search for API&#39;s to learn. Because we already learned DirectX11 in DAE I&#39;ve decided to go and learn the Vulkan API by Khronos.</p><p>For those that don&#39;t know: Vulkan is also known as the next generation of OpenGL, where the Khronos group decided to give the developers full control of the API. This makes Vulkan very configurable but also hard to learn, hence I&#39;ve decided to start my journey and this is the result.</p><h2 id="the-first-1000-lines" tabindex="-1">The first 1000 lines <a class="header-anchor" href="#the-first-1000-lines" aria-hidden="true">#</a></h2><p>As this is the first Graphical API I learned I made sure to buy a course on Udemy going over creating the entire pipeline from scratch which to be honest: It is really... really testing my patience. Currently I have been watching more than 10 hours on how to render a triangle and I am almost there. Just 2-3 more hours to go T-T</p><p>On the bright side: this course explains Vulkan in depth, which im takefull for. I hate people who make tutorials and make you copy huge chunks of code! But in Vulkan&#39;s case I was starting to see why they did it.</p><details class="details custom-block"><summary>Example setting up the graphics pipeline in Vulkan</summary><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Read in SPIR-V code of shaders</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> vertexShaderCode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readFile</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shaders/vert.spv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> fragmentShaderCode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readFile</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shaders/frag.spv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Build shader modules to link to graphics pipeline</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkShaderModule vertexShaderModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateShaderModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vertexShaderCode</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkShaderModule fragmentShaderModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateShaderModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fragmentShaderCode</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- SHADER STAGE CREATION INFORMATION ---</span></span>
<span class="line"><span style="color:#676E95;">	// Vertex stage creation information</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineShaderStageCreateInfo vertexShaderCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_SHADER_STAGE_VERTEX_BIT</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> // Shader stage type</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vertexShaderModule</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> // Module to be used</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;"> // function to run in shader file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Fragment stage creation information</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineShaderStageCreateInfo fragmentShaderCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	fragmentShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	fragmentShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_SHADER_STAGE_FRAGMENT_BIT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	fragmentShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fragmentShaderModule</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	fragmentShaderCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineShaderStageCreateInfo shaderStages[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> vertexShaderCreateInfo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fragmentShaderCreateInfo </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- VERTEX INPUT --</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineVertexInputStateCreateInfo vertexInputCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexInputCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexInputCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vertexBindingDescriptionCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexInputCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pVertexBindingDescriptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span><span style="color:#676E95;">							// List of vertex binding descriptions (data spacing/stride information)</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexInputCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vertexAttributeDescriptionCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	vertexInputCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pVertexAttributeDescriptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span><span style="color:#676E95;">						// List of vertex attribute descriptions (data format and where to bind to/from)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- INPUT ASSEMBLY --</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineInputAssemblyStateCreateInfo inputAssemblyCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	inputAssemblyCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	inputAssemblyCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">topology </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">						// Primitive type to assemble vertices as</span></span>
<span class="line"><span style="color:#A6ACCD;">	inputAssemblyCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primitiveRestartEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">									// Allow overriding of &quot;strip&quot; topology to start new primitives</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- VIEWPORT &amp; SCISSOR --</span></span>
<span class="line"><span style="color:#676E95;">	// Create a viewport info struct</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkViewport viewport</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">m_SwapchainExtent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">m_SwapchainExtent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">minDepth </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewport</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">maxDepth </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Create a scissor info struct</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkRect2D scissor</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	scissor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offset </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span><span style="color:#676E95;">		// Offset to use region from</span></span>
<span class="line"><span style="color:#A6ACCD;">	scissor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m_SwapchainExtent</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">		// Extent to describe region to use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineViewportStateCreateInfo viewportStateCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewportStateCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewportStateCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">viewportCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewportStateCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pViewports </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">viewport</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewportStateCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scissorCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	viewportStateCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pScissors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">scissor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- DYNAMIC STATES --</span></span>
<span class="line"><span style="color:#676E95;">	// Dynamic states to enable (to avoid baked in values)</span></span>
<span class="line"><span style="color:#676E95;">	//std::vector&lt;VkDynamicState&gt; dynamicStateEnables{};</span></span>
<span class="line"><span style="color:#676E95;">	//dynamicStateEnables.push_back(VK_DYNAMIC_STATE_VIEWPORT);	// Dynamic viewport, resize in command buffer with vkCmdSetViewport(commandBuffer, 0, 1, &amp;viewport)</span></span>
<span class="line"><span style="color:#676E95;">	//dynamicStateEnables.push_back(VK_DYNAMIC_STATE_SCISSOR);	// Dynamic scissor, resize in command buffer with vkCmdSetScissor(commandBuffer, 0, 1, &amp;scissor)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	//// Dynamic state creation info</span></span>
<span class="line"><span style="color:#676E95;">	//VkPipelineDynamicStateCreateInfo dynamicStateCreateInfo{};</span></span>
<span class="line"><span style="color:#676E95;">	//dynamicStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;</span></span>
<span class="line"><span style="color:#676E95;">	//dynamicStateCreateInfo.dynamicStateCount = static_cast&lt;uint32_t&gt;(dynamicStateEnables.size());</span></span>
<span class="line"><span style="color:#676E95;">	//dynamicStateCreateInfo.pDynamicStates = dynamicStateEnables.data();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- RASTERIZER --</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineRasterizationStateCreateInfo rasterizerCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depthClampEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">			// Change if fragments beyond near/far plane are clipped or clamped to plane (need to enable device feature for this)</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rasterizerDiscardEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	// Discard data and skip. Used for data without rendering (Leave to false)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">polygonMode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_POLYGON_MODE_FILL</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	// How to handle polygon rendering. (fill will consider all points within polygon as fragment/pixels. line is handy for wire frames)</span></span>
<span class="line"><span style="color:#676E95;">																// other needs GPU features</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lineWidth </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">						// Any value other that 1 needs GPU feature</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cullMode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_CULL_MODE_BACK_BIT</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">		// Don&#39;t render back side.</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">frontFace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FRONT_FACE_CLOCKWISE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	// Which side is front</span></span>
<span class="line"><span style="color:#A6ACCD;">	rasterizerCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">depthBiasEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">			// Whether to add depth bias to fragments (good for stopping &quot;Shadow acne&quot; in shadow mapping)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- MULTISAMPLING --</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineMultisampleStateCreateInfo multiSamplingCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	multiSamplingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	multiSamplingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sampleShadingEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">					// Enable multi sampling shading or not</span></span>
<span class="line"><span style="color:#A6ACCD;">	multiSamplingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rasterizationSamples </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_SAMPLE_COUNT_1_BIT</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">	// Number of samples to use per fragment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- BLENDING --</span></span>
<span class="line"><span style="color:#676E95;">	// Blending decides how to blend a new color being written to a fragment, with the old value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Blend attachment state =&gt; how blending is handled</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineColorBlendAttachmentState colorState</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">colorWriteMask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_COLOR_COMPONENT_R_BIT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> VK_COLOR_COMPONENT_G_BIT</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> VK_COLOR_COMPONENT_B_BIT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> VK_COLOR_COMPONENT_A_BIT</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">  // Colors to apply blending to</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">blendEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_TRUE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">							// Enable blending</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Blending uses the follow equation: (srcColorBlendFactor * new color) colorBlendOp (destColorBlendFactor * old color)</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">srcColorBlendFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_FACTOR_SRC_ALPHA</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dstColorBlendFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">colorBlendOp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_OP_ADD</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Summarised: (VK_BLEND_FACTOR_SRC_ALPHA * new color) + (VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA * old color)</span></span>
<span class="line"><span style="color:#676E95;">	//			   ( new color alpha * new color) + ((1- new color alpha) * old color)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">srcAlphaBlendFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_FACTOR_ONE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dstAlphaBlendFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_FACTOR_ZERO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alphaBlendOp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_BLEND_OP_ADD</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;">	// Summarised: (1 * new alpha) + (0 * old alpha) = new alpha</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineColorBlendStateCreateInfo colorBlendingCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorBlendingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorBlendingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logicOpEnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_FALSE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">			// Alternative to calculations is to use logical operations.</span></span>
<span class="line"><span style="color:#676E95;">	//colorBlendingCreateInfo.logicOp = VK_LOGIC_OP_COPY;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorBlendingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attachmentCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	colorBlendingCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pAttachments </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">colorState</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#676E95;">	// -- PIPELINE LAYOUT (TODO: apply future descriptor set layouts)</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setLayoutCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pSetLayouts </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pushConstantRangeCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pPushConstantRanges </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Create Pipeline layout</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkResult result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vkCreatePipelineLayout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_MainDevice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logicalDevice</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">pipelineLayoutCreateInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">m_PipelineLayout</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> VK_SUCCESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">throw</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">runtime_error</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Failed to create pipeline layout</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- Depth stencil testing</span></span>
<span class="line"><span style="color:#676E95;">	// TODO: Set up depth stencil testing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// -- Graphics pipeline creation</span></span>
<span class="line"><span style="color:#A6ACCD;">	VkGraphicsPipelineCreateInfo pipelineCreateInfo</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stageCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">										// Number of shader stages</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pStages </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> shaderStages</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">								// List of shader stages</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pVertexInputState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">vertexInputCreateInfo</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">          // All the fixed function pipeline states</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pInputAssemblyState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">inputAssemblyCreateInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pViewportState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">viewportStateCreateInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pDynamicState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pRasterizationState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">rasterizerCreateInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pMultisampleState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">multiSamplingCreateInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pColorBlendState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">colorBlendingCreateInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pDepthStencilState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layout </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m_PipelineLayout</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">							// Pipeline layout to be used</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">renderPass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> m_RenderPass</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">							// Render pass description the pipeline is compatible with</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">subpass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">											// Subpass of render pass to use with pipeline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Pipeline derivatives: can create multiple pipelines that derive from one another for optimization</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basePipelineHandle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VK_NULL_HANDLE</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">					// Existing pipeline to derive from</span></span>
<span class="line"><span style="color:#A6ACCD;">	pipelineCreateInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">basePipelineIndex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">								// or index of pipeline being create to derive from (if making multiple)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// Create graphics pipeline</span></span>
<span class="line"><span style="color:#A6ACCD;">	result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">vkCreateGraphicsPipelines</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_MainDevice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logicalDevice</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> VK_NULL_HANDLE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">pipelineCreateInfo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">m_GraphicsPipeline</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> VK_SUCCESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">throw</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">runtime_error</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Failed to create graphics pipelines</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">	// CREATE PIPELINE (once we create pipeline we can destroy here)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">vkDestroyShaderModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_MainDevice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logicalDevice</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fragmentShaderModule</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">vkDestroyShaderModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_MainDevice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logicalDevice</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vertexShaderModule</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br></div></div></details><div class="danger custom-block"><p class="custom-block-title">Realisation</p><p>and that.... was just the pipeline alone...</p></div>`,8),o=[e];function t(r,c,D,i,C,y){return n(),a("div",null,o)}const b=s(p,[["render",t]]);export{A as __pageData,b as default};
